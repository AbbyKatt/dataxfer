#Individual records/simple storage class
from typing import List
import json
class MetaRecord:

    def __init__(self,uuid="",name="",entityType="",author="",latestUpdate="",keys={},dataFields={},changeHistory=""):
        self.uuid = uuid
        self.name = name
        self.entityType = entityType
        self.author = author
        self.latestUpdate = latestUpdate
        self.changeHistory=changeHistory
        self.keys = keys
        self.dataFields = dataFields
        self.contentEmbedding=[]
        self.metadata={}

    def to_Json(self):
        #Add some helper fields to keys
        mutatedKeys=self.keys.copy()
        mutatedKeys["__uuid"]=self.uuid
        mutatedKeys["__name"]=self.name

        return {
            "uuid":self.uuid,
            "name":self.name,
            "entityType":self.entityType,
            "keys":json.dumps(mutatedKeys),
            "author":self.author,
            "changeHistory":self.changeHistory,
            "latestUpdate":self.latestUpdate,
            "dataFields":json.dumps(self.dataFields),
            "MetaData":json.dumps(self.metadata) if self.metadata else ""
        }
    
    def from_Json(self,jsonStr):
        self.uuid = jsonStr["uuid"]
        self.name = jsonStr["name"]
        self.entityType = jsonStr["entityType"]
        self.author = jsonStr["author"]
        self.changeHistory = jsonStr["changeHistory"]
        self.latestUpdate = jsonStr["latestUpdate"]

        #Load JSON strings into dictionaries
        self.keys = {} if "keys" not in jsonStr or not jsonStr["keys"] else json.loads(jsonStr["keys"])                  
        self.dataFields = {} if "dataFields" not in jsonStr or not jsonStr["dataFields"] else json.loads(jsonStr["dataFields"])
        self.metadata = {} if "MetaData" not in jsonStr or not jsonStr["MetaData"] else json.loads(jsonStr["MetaData"])

    #Turn metarecord into a flat string for vectorDB search
    def content(self):
        flatRecords="Type:" + self.entityType + "\n"
        flatRecords+=f"UUID: {self.uuid}\n"
        for key in self.dataFields:
            flatRecords+=f"{key}: {self.dataFields[key]}\n"
        flatRecords+=f"\n"
        return flatRecords
    
    #Turns metarecord into a json representation for vectorDB insert
    def toVectorRecord(self):
        return {
            "uuid":self.uuid,
            "entity_type":self.entityType,
            "name":self.name,
            "content":self.content(),
            "contentVector":self.contentEmbedding
        }

    @staticmethod
    def toVectorRecordList(metaRecords:List["MetaRecord"]):
        return [metaRecord.toVectorRecord() for metaRecord in metaRecords]

    #Indicates whether the data fields have changed
    def isChanged(self,deltaField):
        #Compare fields json
        selfJson=json.dumps(self.dataFields)
        deltaJson=json.dumps(deltaField)       
        return selfJson!=deltaJson

    #Metadata changed
    def isMetaDataChanged(self,deltaField):
        #Compare metadata json
        selfMetaJson=json.dumps(self.metadata)
        deltaMetaJson=json.dumps(deltaField.metadata)
        return selfMetaJson!=deltaMetaJson

    #Get change history as a string
    def getChangeHistory(self,oldrecord):
        deltaField=oldrecord.dataFields
        changes=[]

        #Check if deltafield adds new fields
        for key in deltaField:
            if key not in self.dataFields:
                changes.append(f"Added field {key}")
        
        #Check if deltafield removes fields
        for key in self.dataFields:
            if key not in deltaField:
                changes.append(f"Removed field {key}")

        #Check if deltafield changes fields
        for key in self.dataFields:
            if key in deltaField and deltaField[key]!=self.dataFields[key]:
                changes.append(f"Changed Field [{key}]")

        if self.isMetaDataChanged(oldrecord):
            changes.append("Metadata Updated")

        #Turn changes into a newline separated string
        return "\n".join(changes)
