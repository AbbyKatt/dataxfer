#Internal business classes (Environment)

class Environment():
    def __init__(self,name:str):
        self.name=name
        self.batches={}

    def getBatches(self):
        return self.batches

    def isComponentRunning(self,component:str):
        return component in self.batches

    def getThreadUtilization(self):
        if len(self.batches)==0:
            return 0
        else:
            totalThread=0
            for key in self.batches:
                totalThread+=self.batches[key].threadpoolsize
            return totalThread
        
    def getTotalRunningBatches(self):
        running=0
        for keys in self.batches:
            batch=self.batches[keys]
            if batch.status=="running":
                running+=1
        return running

    def TestComponent(self,component:str,keys_table,threadpoolsize:int):
        try:        
            if self.isComponentRunning(component):
                return (False,"Component already running")
            else:
                componentsToRun=GetTestsForComponent(self.name,component,keys_table)
                if len(componentsToRun)==0:
                    return (False,f"No tests found for [{component}] - test table not found in RAFT_CONFIG")
                else:
                    #Run the batch!
                    batch=Batch(self.name,component,threadpoolsize,componentsToRun)
                    self.batches[component]=batch
                    batch.run()
                    return (True,"Component started")
                

        except Exception as e:
            return (False,"Error starting component: " + str(e))
