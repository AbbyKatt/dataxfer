import json
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import requests
from st_aggrid import AgGrid, GridOptionsBuilder
from urllib.parse import quote
import random
import seaborn as sns
import matplotlib.pyplot as plt





#API - interface, move to external library-------------------------------------------------------------------
API_URL = "http://localhost:4040"

@st.cache_data
def get_environments():
    response = requests.get(API_URL + "/get-environments")
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve environments. Status code: {response.status_code}")
        return []
@st.cache_data
def get_ComponentsForEnvironment(environment):
    response = requests.get(API_URL + "/environment-tests?environment=" + environment)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve testable Components for environments. Status code: {response.status_code}")
        return []

def SyntheticBatchResults():
    fields=["Test_Name","Status","Total_Source_Rows","Total_Error_Rows","Worst_Field","Worst_Field_Rows","Message"]
    df=pd.DataFrame(columns=fields)
    i=0
    df.loc[0] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'PD',random.randint(50000,200000),""]
    i+=1    
    df.loc[1] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'RWA',random.randint(50000,200000),""]
    i+=1
    df.loc[2] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','FAIL',0,0,'',0,"Source table not found"]
    i+=1
    df.loc[3] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'LGD',random.randint(50000,200000),""]
    i+=1
    df.loc[4] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),0,'No Errors',0,""]
    i+=1
    df.loc[5] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),0,'No Errors',0,""]
    i+=1
    df.loc[6] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'Customer_ID',random.randint(50000,200000),""]
    i+=1
    df.loc[7] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),0,'No Errors',0,""]
    i+=1
    df.loc[0] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'PD',random.randint(50000,200000),""]
    i+=1    
    df.loc[8] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'RWA',random.randint(50000,200000),""]
    i+=1
    df.loc[9] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','FAIL',0,0,'',0,"Source table not found"]
    i+=1
    df.loc[10] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'Defaulted',random.randint(50000,200000),""]
    i+=1
    df.loc[11] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),0,'No Errors',0,""]
    i+=1
    df.loc[12] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),0,'No Errors',0,""]
    i+=1
    df.loc[13] = [f'R14_BLA_BLA_COMMN_INTRA_{i}','PASS',random.randint(1000000,4000000),random.randint(100000,400000),'CRM_ID',random.randint(50000,200000),""]
    normalise=lambda x,y: 0 if x==0 or y==0 else x/y
    df['Error_Rate']=df.apply(lambda x: normalise(x['Total_Error_Rows'],x['Total_Source_Rows']),axis=1)
    return df

def GetTableErrors():
    fields=["FieldName","Error_Rate","Total_Source_Rows","Total_Error_Rows"]
    df=pd.DataFrame(columns=fields)
    i=0
    df.loc[0]=[f'PD',random.randint(100000,400000),random.randint(1000000,4000000),random.randint(100000,400000)]
    i+=1
    df.loc[1]=[f'RWA',random.randint(100000,400000),random.randint(1000000,4000000),random.randint(100000,400000)]
    i+=1
    df.loc[2]=[f'Customer_ID',random.randint(100000,400000),random.randint(1000000,4000000),random.randint(100000,400000)]
    i+=1
    df.loc[3]=[f'Defaulted',random.randint(100000,400000),random.randint(1000000,4000000),random.randint(100000,400000)]
    i+=1
    df.loc[4]=[f'LGD',random.randint(100000,400000),random.randint(1000000,4000000),random.randint(100000,400000)]
    
    #if total_error_rows=0 or total_source_rows=0 then return zero, otherwise return total_error_rows/total_source_rows
    normalise=lambda x,y: 0 if x==0 or y==0 else x/y
    df['Error_Rate']=df.apply(lambda x: normalise(x['Total_Error_Rows'],x['Total_Source_Rows']),axis=1)

    #sort by error rate
    df.sort_values(by=['Error_Rate'],ascending=False,inplace=True)
    return df

def PlotTestsByError(testsByError):
    sns.set_theme(style="whitegrid")
    fig,ax=plt.subplots(figsize=(4,4))
    ax = sns.barplot(x="Error_Rate", y="Test_Name", data=testsByError)
    plt.show()
    st.pyplot(fig)
    plt.clf()


def PlotErrorsForTest(testsByError):
    sns.set_theme(style="whitegrid")
    fig,ax=plt.subplots(figsize=(4,4))
    ax = sns.barplot(x="Error_Rate", y="FieldName", data=testsByError)
    plt.show()
    st.pyplot(fig)
    plt.clf()


#---------------------------------------------------------------------------------------

#use wide layout
st.set_page_config(layout="wide")

st.markdown('<style>h1{color: #FFFFFF; text-align: center;}</style>', unsafe_allow_html=True)
st.title("FlowShift")
st.subheader("View Test Results")
environment=st.selectbox("Select Environment", get_environments())

if st.button("Detect Tests"):
    st.write(f"Detecting Available Test Components in {environment}...")
    TestableComponents = json.loads(get_ComponentsForEnvironment(environment))
    st.session_state.TestableComponents = TestableComponents

if "TestableComponents" not in st.session_state:
    st.text("Select a Test Set to continue...")
else:
    #Components to test
    df = pd.DataFrame.from_dict(st.session_state.TestableComponents)
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_selection('single')  # Change to 'multiple' for multi-row selection
    gb.configure_grid_options(domLayout='autoHeight')
    grid_options = gb.build()

    # Fit columns on grid load
    grid_response = AgGrid(
        df, 
        gridOptions=grid_options, 
        height=400, # Adjust height (in pixels)
        fit_columns_on_grid_load=True
    )

    # Get selected rows from components
    selected_rows = grid_response['selected_rows']
    if len(selected_rows)>0:
        st.markdown("***")
        st.subheader("Test Results")
        df=SyntheticBatchResults()
        testsByError=df.sort_values(by=['Error_Rate'],ascending=False,inplace=False)
        st.write(testsByError)
        st.markdown("<br>",unsafe_allow_html=True)
        st.subheader("Tests by Normalized Error Rate (errors/total source rows)")
        PlotTestsByError(testsByError)

        errorPlot=GetTableErrors()
        st.markdown("<br>",unsafe_allow_html=True)
        st.subheader("Error Rates by Table")
        PlotErrorsForTest(errorPlot)
        