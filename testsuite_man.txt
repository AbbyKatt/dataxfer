import time
from config import Config
from workflow_manager import WorkFlowManager
from sqlfunctions import GetTestComponentsForEnvironment

import sys
import pandas as pd
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import uvicorn
import threading


#---------------------------------------------------------------------------------------------------
#Global Application State
#---------------------------------------------------------------------------------------------------
gConfig=Config()
gWorkFlowManager=WorkFlowManager(gConfig)
app = FastAPI()

#LoadConfig - called different for main app and unit-testing
def LoadConfig(configPath:str):
    try:
        global gConfig
        gConfig.Load(configPath)
        return True
    except Exception as e:
        print(f"Error loading config: {e}")
        return False

#For testing
def GetConfig():
    global gConfig
    return gConfig
#---------------------------------------------------------------------------------------------------
#FastAPI
#---------------------------------------------------------------------------------------------------

@app.get("/get-environments")
def get_environments():
    global gConfig
    return gConfig.environments

@app.get("/get-test-types")
def get_test_types():
    return gConfig.testtypes

@app.get("/get-test-components")
def get_tests_for_env(environment: str):
    df=GetTestComponentsForEnvironment(environment)
    return df.to_json()

@app.get("/run-testworkflow")
def run_testworkflow(environment: str,testtype: str,component: str,threadpoolsize:int):
    #params: dict
    global gWorkFlowManager
    return gWorkFlowManager.RunWorkFlow(environment,testtype,component,{},int(threadpoolsize))

@app.get("/get-dataset")
def get_dataset(environment:str,sql:str):
    df=pd.read_gbq(sql,project_id=environment)
    json=df.to_json()
    return json

class WorkFlowRequest(BaseModel):
    workflows: list
    threadpoolsize: int

@app.post("/enqueue-testworkflows")
def enqueue_testworkflows(request: WorkFlowRequest):
    global gWorkFlowManager
    return gWorkFlowManager.EnQueueWorkFlows(request.workflows,request.threadpoolsize)

@app.get("/get-environment-usage")
def get_environment_usage(environment: str):
    global gWorkFlowManager
    return gWorkFlowManager.GetUsageStats(environment)

# @app.get("/terminate")
def terminate():
    global gWorkFlowManager
    gWorkFlowManager.Terminate()
    return True

@app.get("/get-running-workflows")
def get_running_workflows(environment: str):
    global gWorkFlowManager
    return gWorkFlowManager.GetRunningWorkFlows(environment)

@app.get("/get-workflow-batch-status")
def get_workflow_batchstatus(environment: str,testtype: str,component: str):
    global gWorkFlowManager
    return gWorkFlowManager.GetWorkflowBatchStatus(environment,testtype,component)

#---------------------------------------------------------------------------------------------------
#Workflow Scheduler
#---------------------------------------------------------------------------------------------------

#Automatically run workflows when one finishes
def workflow_scheduler():
    global gWorkFlowManager
    return gWorkFlowManager.RunScheduler()

#---------------------------------------------------------------------------------------------------
#Main Application Loop
#---------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    config=Config()
    if len(sys.argv)>1:
        if not LoadConfig(sys.argv[1]):
            print("Error loading config file")
            sys.exit(1)
        else:
            threading.Thread(target=lambda: uvicorn.run(app, host="0.0.0.0", port=4040, log_level="info")).start()    
    else:
        print("Usage: job_manager.py <config file>")
        sys.exit(1)

    #Launch workflows as slots become free
    while True:
        time.sleep(2)
        workflow_scheduler()

        
    
