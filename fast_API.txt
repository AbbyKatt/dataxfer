@app.get("/get-environments")
def get_environments():
    return list(environments.keys())

@app.get("/environment-tests")
def get_environments(environment: str):
    df=GetTestComponentsForEnvironment(environment)
    return df.to_json()

@app.get("/test-component")
def test_component(environment: str,component:str,keys_table:str,threadpoolsize:int):
    env=environments[environment]
    ret=env.TestComponent(component,keys_table,threadpoolsize)
    status=ret[0]
    message=ret[1]
    return {"status":status,"message":message}

##>>debuggging this    
@app.get("/get-environment-stats")
def get_environment_stats(environment: str):
    env=environments[environment]
    utilization=environments[environment].getThreadUtilization()
    batches=env.getTotalRunningBatches()
    results={"RunningQueries": utilization,"RunningBatches": batches}
    return results

@app.get("/get-environment-current-batches")
def get_environment_current_batches(environment: str):
    env=environments[environment]
    batches=env.getBatches()
    ret=[]
    for batch in batches.values():
        ret.append(batch.get_json())
    return ret

@app.get("/get-batch-status")
def get_batch_status(environment,component):
    env=environments[environment]
    batches=env.getBatches()
    ret=[]
    for batch in batches.values():
        if batch.component==component:
            #Whole batch status -> st.write in steamlit
            print(batch.get_json())

            for job in batch.jobs:
                print(job.GetTestStatus())
                ret.append(job.GetTestStatus())
    return ({"batch":batch.get_json(),"jobs":ret})
