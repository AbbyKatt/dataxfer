import json

#Test steps - represents a single test-compartment (single or multiple batch tasks) in the test sequence
class TemplateStep():
    def __init__(self,name,multiplicity,selectsql,function):
        self.name=name
        self.multiplicity=multiplicity
        self.selectsql=selectsql
        self.function=function
        self.tablexpirtation=72

    def to_json(self):
        return {"name":self.name,"multiplicity":self.multiplicity,"selectsql":self.selectsql,"function":self.function}

#Config class handles environments and testflow definitions
class Config():
    def __init__(self):
        self.workers=None
        self.environments=[]
        self.testtypes=[]
        self.workFlows={}

    #load JSON config
    def Load(self,configPath:str):
        print(f"Loading config [{configPath}]")
        with open(configPath) as json_file:
            data = json.load(json_file)
            self.environments=data['environments']
            self.testtypes=data['test_types']

            #Get test workflows dictionary
            workflows=data['workflows']
            for workflow in workflows:
                name=workflow["test_type"]
                steps=[]
                for sequence in workflow["sequence"]:
                    steps.append(TemplateStep(sequence['name'],sequence['multiplicity'],sequence['selectsql'],sequence['function']))
                    self.workFlows[name]=steps
            print(f"Loaded {len(self.environments)} Environments and {len(self.workFlows)} WorkFlows")
        return True

    #Debug dump config
    def to_json(self):
        workFlowJSon={}
        for key in self.workFlows:
            workFlowJSon[key]=[step.to_json() for step in self.workFlows[key]]
        return {"environments":self.environments,"testtypes":self.testtypes,"workflows":workFlowJSon}
        
    def testTypeExists(self,testType:str):
        return testType in self.testtypes.values()
    
    def getTestTemplate(self,testType:str):
        return self.workFlows[testType]

        
