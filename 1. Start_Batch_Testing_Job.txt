import json
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import requests
from st_aggrid import AgGrid, GridOptionsBuilder
from urllib.parse import quote
import os

#API - interface, move to external library-------------------------------------------------------------------
API_URL = api_url = os.getenv('FLOWSHIFT_API', 'http://localhost:4040')
#print(f"API URL: {API_URL}")

@st.cache_data
def get_environments():
    response = requests.get(API_URL + "/get-environments")
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve environments. Status code: {response.status_code}")
        return []

@st.cache_data
def get_test_types():
    response = requests.get(API_URL + "/get-test-types")
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve test types. Status code: {response.status_code}")
        return []

#@st.cache_data
def get_ComponentsForEnvironment(environment):
    response = requests.get(API_URL + "/get-test-components?environment=" + environment)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve testable Components for environments. Status code: {response.status_code}")
        return response.json()

#gets environmental usage
def get_EnvironmentStats(environment: str):
    response = requests.get(API_URL + "/get-environment-usage?environment=" + environment)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve environment stats. Status code: {response.status_code}")
        return []    

def GetQueuedWorkFlowDict(environment:str,testtype:str,component:str,params:dict):
    return {"environment":environment,"testtype":get_test_types()[testtype],"component":component,"params":params}

def queue_Workflows(workflows:list,threadpoolsize:int=4):
    data={"workflows":workflows,"threadpoolsize":threadpoolsize}
    URL=API_URL + f"/enqueue-testworkflows"
    response=requests.post(URL, json=data)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to start test job. Status code: {response.text}")
        return response.json()

#------------------------------------------------------------------------------------------------------------

#use wide layout
st.set_page_config(layout="wide")

st.markdown('<style>h1{color: #FFFFFF; text-align: center;}</style>', unsafe_allow_html=True)
st.title("RAFT")
st.subheader("Launch New Batch Testing Job")
col1,col2=st.columns(2)
with col1:
    environment=st.selectbox("Select Environment", get_environments())
with col2:
    testtype=st.selectbox("Select Test Type", get_test_types().keys())

if st.button("Detect Tests"):
    st.write(f"Detecting Available Test Components in {environment}...")
    ret=get_ComponentsForEnvironment(environment)
    #st.write(ret)
    if "status_code" in ret:
        st.error("Error Getting Components: " + ret["detail"])
    else:    
        TestableComponents = json.loads(ret)
        st.session_state.TestableComponents = TestableComponents

if 'TestableComponents' in st.session_state:
    #st.write(TestableComponents)
    df = pd.DataFrame.from_dict(st.session_state.TestableComponents)
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_selection('multiple')  # Change to 'multiple' for multi-row selection
    gb.configure_grid_options(domLayout='autoHeight')
    grid_options = gb.build()

    # Fit columns on grid load
    grid_response = AgGrid(
        df, 
        gridOptions=grid_options, 
        height=400, # Adjust height (in pixels)
        fit_columns_on_grid_load=True
    )

    # Get selected rows
    selected_rows = grid_response['selected_rows']

    #Handle multi select
    queue=[]
    for row in selected_rows:
        queue.append(GetQueuedWorkFlowDict(environment,testtype,row['Component'],{}))
    #st.write(queue)

    st.text("Shift-Click to select multiple components for batch testing...")

    if len(selected_rows)>0:

        st.markdown("***")  
        col1,col2= st.columns(2)
        with col1:
            stats=get_EnvironmentStats(environment)
            #st.write(stats)
            st.subheader(f"Environmental Usage for [{environment}]")
            st.write(f"Total Test Workflows: {stats['RunningWorkFlows']}")
            st.write(f"Total Test Batches: {stats['RunningBatches']}")
            st.write(f"Running Test Queries: {stats['RunningQueries']} ")

            #linebreak 
            st.markdown("<br>", unsafe_allow_html=True)
        
            #show progress bar
            progress=stats['RunningQueries']/64.0
            st.progress(progress,"Utilisation")


        with col2:
            #Calculate max batch size
            st.subheader(f"Begin Batch Testing in [{environment}]")
            maxBatchSize=64-(stats['RunningQueries'])
            if maxBatchSize<1:
                st.error("Environment is at max capacity - please wait for queries to complete. Check Monitor for details")
            else:            
                st.write(f"To not run into the BigQuery limit of 64 concurrent queries - please select a reasonable batch size")
                batchSize=st.slider("Max Concurrent Testing Queries",1,int(maxBatchSize),int(maxBatchSize/2))
                runTest=st.button("Test Component", key=selected_rows[0]['Component'])
        st.markdown("***")

        #Run test
        if runTest:
                    st.write(f"Starting {len(queue)} Test Job(s) in {environment}...")

                    #Launch component using data from grid on selected row
                    comp=selected_rows[0]['Component']
                    testypedict=get_test_types()
                    testtype_short=testypedict[testtype]
                    results=queue_Workflows(queue,batchSize)

                    #Write results as a list of success/failures                    
                    for result in results:
                        status,message=result
                        if status==True:
                            st.success(message)
                        else:
                            st.error(message)

    else:
        st.write("Select a test to proceed...")


    